package com.example.bryan.password;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import Password.Password;

public class MainActivity extends AppCompatActivity {

    private EditText passwordLength;
    private EditText symbolCount;
    private EditText numberCount;
    private EditText password;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        passwordLength = (EditText) findViewById(R.id.passLength);
        symbolCount = (EditText) findViewById(R.id.symbolCount);
        numberCount = (EditText) findViewById(R.id.numCount);
        password = (EditText) findViewById(R.id.password);
        int passwordLengthInt;


        final Button button = (Button) findViewById(R.id.button);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                generatePassword();
            }
        });

    }

    /**
     * Generates a random password based on user input
     */
    private void generatePassword(){
        int passwordLengthInt = 0;
        int numberCountInt = 0;
        int symbolCountInt = 0;

        boolean isValidCombination = true;
        String blankEntries = "";

        //Initializes password length
        if(isEmpty(passwordLength)){
            blankEntries += "Password Length is empty \n";
        } else{
            passwordLengthInt = Integer.parseInt(passwordLength.getText().toString());
        }

        //Initializes number count
        if(!isEmpty(numberCount)){
            numberCountInt = Integer.parseInt(numberCount.getText().toString());
            if(numberCountInt > passwordLengthInt){
                isValidCombination = false;
                blankEntries += "Invalid entry. Number count is too high!  \n ";
                numberCountInt = 0;
            }
        }

        //Initializes symbol count
        if(!isEmpty(symbolCount)){
            symbolCountInt = Integer.parseInt(symbolCount.getText().toString());
            if(symbolCountInt > (passwordLengthInt - numberCountInt)){
                isValidCombination = false;
                blankEntries += "Invalid entry. Symbol count is too high!  \n ";
                numberCountInt = 0;
            }
        }

        //Creates toast messages
        if(!blankEntries.isEmpty()){
            Toast.makeText(getApplicationContext(), blankEntries, Toast.LENGTH_LONG).show();
        } else{
            Toast.makeText(getApplicationContext(), "Generated!", Toast.LENGTH_SHORT).show();
        }

        if(isValidCombination){
            final Password newPassword = new Password(passwordLengthInt, numberCountInt, symbolCountInt);
            password.setText(newPassword.generatePassword());
        }

    }
    private boolean isEmpty(EditText etText) {
        if (etText.getText().toString().trim().length() > 0)
            return false;

        return true;
    }
}
